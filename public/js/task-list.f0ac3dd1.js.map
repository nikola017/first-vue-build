{"version":3,"file":"js/task-list.f0ac3dd1.js","mappings":"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","sources":["webpack://first-vue/./src/views/TaskList.vue","webpack://first-vue/./src/store/taskStore.js","webpack://first-vue/./src/views/TaskList.vue?dbfd"],"sourcesContent":["<template>\r\n  <div class=\"task-list\">\r\n    <h1>Zadaci</h1>\r\n    <input v-model=\"taskStore.newTaskText\" @keyup.enter=\"taskStore.addTask(taskStore.newTaskText)\" placeholder=\"Dodaj novi zadatak...\">\r\n    <button @click=\"taskStore.addTask(taskStore.newTaskText)\">Dodaj</button>\r\n    \r\n    <div>\r\n      Prikaži:\r\n      <button @click=\"taskStore.setFilter('all')\">Sve</button>\r\n      <button @click=\"taskStore.setFilter('active')\">Aktivne</button>\r\n      <button @click=\"taskStore.setFilter('done')\">Završene</button>\r\n    </div>\r\n\r\n    <ul>\r\n      <li v-for=\"task in taskStore.filteredTasks\" :key=\"task.id\">\r\n        <label>\r\n          <input type=\"checkbox\" v-model=\"task.done\">\r\n          <span :class=\"{ done: task.done }\">{{ task.text }}</span>\r\n        </label>\r\n        <button @click=\"taskStore.removeTask(task.id)\">Obriši</button>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n  \r\n<script>\r\nimport { useTaskStore } from '@/store/taskStore';\r\nimport { watch } from 'vue';\r\n\r\nexport default {\r\n  name: 'TaskList',\r\n  setup() {\r\n    const taskStore = useTaskStore();\r\n\r\n    // Učitaj zadatke kada se komponenta montira\r\n    taskStore.loadTasks();\r\n\r\n    watch(() => taskStore.tasks, () => {\r\n      taskStore.saveTasks();\r\n    }, { deep: true });\r\n\r\n    return { taskStore };\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n  \r\n<style scoped>\r\n.task-list {\r\n  padding: 20px;\r\n}\r\n.done {\r\n  text-decoration: line-through;\r\n}\r\n</style>\r\n  \r\n\r\n<!-- Kako je izgledalo prije implementacije Pinia store-a -->\r\n<!--\r\n<template>\r\n  <div class=\"task-list\">\r\n    <h1>Zadaci</h1>\r\n    <input v-model=\"newTaskText\" @keyup.enter=\"addTask\" placeholder=\"Dodaj novi zadatak...\">\r\n    <button @click=\"addTask\">Dodaj</button>\r\n\r\n    <div>\r\n      Prikaži:\r\n      <button @click=\"setFilter('active')\">Aktivne</button>\r\n      <button @click=\"setFilter('done')\">Završene</button>\r\n    </div>\r\n\r\n    <ul>\r\n      <li v-for=\"task in filteredTasks\" :key=\"task.id\">\r\n        <label>\r\n          <input type=\"checkbox\" v-model=\"task.done\">\r\n          <span :class=\"{ done: task.done }\">{{ task.text }}</span>\r\n        </label>\r\n        <button @click=\"removeTask(task.id)\">Obriši</button>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n  \r\n<script>\r\nexport default {\r\n  name: 'TaskList',\r\n  data() {\r\n    return {\r\n      newTaskText: '',\r\n      tasks: [],\r\n      nextTaskId: 1,\r\n      filter: 'all'\r\n    }\r\n  },\r\n  methods: {\r\n    addTask() {\r\n      if (this.newTaskText.trim() !== '') {\r\n        this.tasks.push({\r\n          id: this.nextTaskId++,\r\n          text: this.newTaskText,\r\n          done: false\r\n        });\r\n        this.newTaskText = '';\r\n      }\r\n    },\r\n    removeTask(taskId) {\r\n      this.tasks = this.tasks.filter(task => task.id !== taskId);\r\n    },\r\n    toggleTaskStatus(task) {\r\n      task.done = !task.done;\r\n    },\r\n    saveTasks() {\r\n      localStorage.setItem('tasks', JSON.stringify(this.tasks));\r\n    },\r\n    setFilter(filter) {\r\n      this.filter = filter;\r\n    }\r\n  },\r\n  computed: {\r\n    filteredTasks() {\r\n      switch (this.filter) {\r\n        case 'active':\r\n          return this.tasks.filter(task => !task.done);\r\n        case 'done':\r\n          return this.tasks.filter(task => task.done);\r\n        default:\r\n          return this.tasks;\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    tasks: {\r\n      deep: true,\r\n      handler() {\r\n        this.saveTasks();\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    if (localStorage.getItem('tasks')) {\r\n      this.tasks = JSON.parse(localStorage.getItem('tasks'));\r\n    }\r\n  }\r\n}\r\n</script>\r\n-->","import { defineStore } from 'pinia';\r\n\r\nexport const useTaskStore = defineStore('taskStore', {\r\n  state: () => ({\r\n    tasks: [],\r\n    nextTaskId: 1,\r\n    filter: 'all'\r\n  }),\r\n  getters: {\r\n    filteredTasks: (state) => {\r\n      switch (state.filter) {\r\n        case 'active':\r\n          return state.tasks.filter(task => !task.done);\r\n        case 'done':\r\n          return state.tasks.filter(task => task.done);\r\n        default:\r\n          return state.tasks;\r\n      }\r\n    }\r\n  },\r\n  actions: {\r\n    addTask(text) {\r\n      if (text.trim() !== '') {\r\n        this.tasks.push({\r\n          id: this.nextTaskId++,\r\n          text: text,\r\n          done: false\r\n        });\r\n      }\r\n    },\r\n    removeTask(taskId) {\r\n      this.tasks = this.tasks.filter(task => task.id !== taskId);\r\n    },\r\n    toggleTaskStatus(task) {\r\n      task.done = !task.done;\r\n    },\r\n    setFilter(filter) {\r\n      this.filter = filter;\r\n    },\r\n    saveTasks() {\r\n      localStorage.setItem('tasks', JSON.stringify(this.tasks));\r\n    },\r\n    loadTasks() {\r\n      const storedTasks = localStorage.getItem('tasks');\r\n      if (storedTasks) {\r\n        this.tasks = JSON.parse(storedTasks);\r\n      }\r\n    }\r\n  }\r\n});\r\n","import { render } from \"./TaskList.vue?vue&type=template&id=1bf6fab8&scoped=true\"\nimport script from \"./TaskList.vue?vue&type=script&lang=js\"\nexport * from \"./TaskList.vue?vue&type=script&lang=js\"\n\nimport \"./TaskList.vue?vue&type=style&index=0&id=1bf6fab8&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-1bf6fab8\"]])\n\nexport default __exports__"],"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_cache","$event","$setup","taskStore","newTaskText","onKeyup","_withKeys","addTask","placeholder","onClick","_createTextVNode","setFilter","_Fragment","_renderList","filteredTasks","task","key","id","type","done","_hoisted_3","_normalizeClass","text","removeTask","_hoisted_4","useTaskStore","defineStore","state","tasks","nextTaskId","filter","getters","actions","trim","this","push","taskId","toggleTaskStatus","saveTasks","localStorage","setItem","JSON","stringify","loadTasks","storedTasks","getItem","parse","name","setup","watch","deep","__exports__","render"],"sourceRoot":""}